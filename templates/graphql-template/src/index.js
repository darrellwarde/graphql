const { ApolloServer } = require("apollo-server");
const neo4j = require("neo4j-driver");
const { Neo4jGraphQL } = require("@neo4j/graphql");
const dotenv = require("dotenv");

const { typeDefs } = require("./graphql-schema");

// set environment variables from .env
dotenv.config();

async function main() {
    /*
     * Create a Neo4j driver instance to connect to the database
     * using credentials specified as environment variables
     * with fallback to defaults
     */
    const driver = neo4j.driver(
        process.env.NEO4J_URI || "bolt://localhost:7687",
        neo4j.auth.basic(process.env.NEO4J_USER || "neo4j", process.env.NEO4J_PASSWORD || "neo4j")
    );

    /*
     * Create an executable GraphQL schema object from GraphQL type definitions
     * including autogenerated queries and mutations.
     * Read more in the docs:
     * https://neo4j.com/docs/graphql-manual/current/
     */

    const neoSchema = new Neo4jGraphQL({ typeDefs, driver });

    const schema = await neoSchema.getSchema();

    /*
     * Create a new ApolloServer instance, serving the GraphQL schema
     * created using makeAugmentedSchema above and injecting the Neo4j driver
     * instance into the context object so it is available in the
     * generated resolvers to connect to the database.
     */
    const server = new ApolloServer({
        context: {
            driver,
            driverConfig: { database: process.env.NEO4J_DATABASE || "neo4j" },
        },
        schema,
        introspection: true,
        playground: true,
    });

    // Specify host, port and path for GraphQL endpoint
    const port = process.env.GRAPHQL_SERVER_PORT || 4001;
    const path = process.env.GRAPHQL_SERVER_PATH || "/graphql";
    const host = process.env.GRAPHQL_SERVER_HOST || "0.0.0.0";

    const { url } = await server.listen({ host, port, path });

    console.log(`ðŸš€  Server ready at ${url}`);
}

main();
